import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
//import edu.princeton.cs.algs4.*;
import edu.princeton.cs.algs4.In;
import edu.princeton.cs.algs4.StdDraw;
import edu.princeton.cs.algs4.StdOut;

// SET CLASS PATH
// export CLASSPATH=.:/home/willy/Documents/Coursera-Algorithms/*:$CLASSPATH
public class FastCollinearPoints {
    
    private List<LineSegment> lineSegs = new ArrayList<>();
    private Point[] pointsCopy;
    private int pointLen;
    /*
    private void printPointArray(Point somePoints[]){
        for(int i = 0; i < somePoints.length; i++){
            System.out.println(somePoints[i].toString());
        }
    }
    private void printPointList(List<Point> otherPoints){
        for(int i = 0; i < otherPoints.size(); i++){
            System.out.println(otherPoints.get(i).toString());
        }
    }
    */
        
    public FastCollinearPoints(Point[] points){         
     // Throw null pointer exception if array is null or any entry is null
        if(points == null || Arrays.asList(points).contains(null)){
            throw new java.lang.NullPointerException();
        }
        else{
            Point[] clone = points.clone();
            // Sort based on method in Point.java
            Arrays.sort(points);
            
            // Copy the points and record the length
            pointsCopy = points.clone();
            pointLen = pointsCopy.length;
            
            // TEST : PRINT BOTH ARRAYS
            /*
            printPoints(points);
            System.out.println();
            printPoints(pointsCopy);
            */
            
            // Throw illegal argument exception if some points are repeated
            for(int i = 0; i < pointLen - 1; i++){
                if(pointsCopy[i].compareTo(pointsCopy[i + 1]) == 0){
                    throw new java.lang.IllegalArgumentException();
                }
            }
            
            
            // Find collinear points
            if(pointLen > 3){
                for(int i = 0; i < pointLen; i++){                
                    // Sort the copy of points by their slope with respect to the base
                    // pointsCopy[0] will be itself
                    Arrays.sort(pointsCopy,points[i].slopeOrder());
                    
                    int index = 1;
                    List<Point> tmpPoints = new ArrayList<>();
                    double curSlope = pointsCopy[0].slopeTo(pointsCopy[index]);
                    tmpPoints.add(pointsCopy[index]);
                    
                    // Keep on comparing the new slope with the current slope
                    while(index < pointLen - 1){
                        if(pointsCopy[0].slopeTo(pointsCopy[++index]) != curSlope){
                            // Check on the tmpPoints arraylist when a different slope is found
                            if(tmpPoints.size() >= 3){
                                Collections.sort(tmpPoints);
                                // Only add if smallest
                                if(pointsCopy[0].compareTo(tmpPoints.get(0)) < 0){
                                    lineSegs.add(new LineSegment(pointsCopy[0],tmpPoints.get(tmpPoints.size() - 1)));
                                }
                            }
                            // Clear tmpPoints and set new current slope after a line segment is found
                            tmpPoints.clear();
                            curSlope = pointsCopy[0].slopeTo(pointsCopy[index]);
                        }
                        // Add the point if slope is equal
                        tmpPoints.add(pointsCopy[index]);

                        // CORNER :  CHECK pointsCopy WHEN SLOPE IS SAME
                        if(index == pointLen - 1){
                            if(pointsCopy[0].slopeTo(pointsCopy[index]) == curSlope && tmpPoints.size() >= 3){
                                Collections.sort(tmpPoints);
                             // Only add if smallest
                                if(pointsCopy[0].compareTo(tmpPoints.get(0)) < 0){
                                    lineSegs.add(new LineSegment(pointsCopy[0],tmpPoints.get(tmpPoints.size() - 1)));
                                }
                                tmpPoints.clear();
                            }
                            
                        }
                    }
                               
                } 
            }        
              
        }
        
    }
    public int numberOfSegments(){
        return lineSegs.size();
    }
    
    public LineSegment[] segments(){
        return lineSegs.toArray(new LineSegment[lineSegs.size()]);
    }
    public static void main(String[] args) {
        // read the n points from a file
        In in = new In(args[0]);
        int n = in.readInt();
        Point[] points = new Point[n];
        for (int i = 0; i < n; i++) {
            int x = in.readInt();
            int y = in.readInt();
            points[i] = new Point(x, y);
        }
        FastCollinearPoints collinear = new FastCollinearPoints(points);
        
        StdDraw.setPenRadius(0.01);
        StdDraw.setPenColor(StdDraw.BLUE);
        StdDraw.enableDoubleBuffering();
        StdDraw.setXscale(0, 32768);
        StdDraw.setYscale(0, 32768);
        
        
        for (LineSegment segment : collinear.segments()) {
            StdOut.println(segment);
            segment.draw();
        }
        StdDraw.show();
        
        
        
        
     // draw the points
        /*
        StdDraw.enableDoubleBuffering();
        StdDraw.setXscale(0, 32768);
        StdDraw.setYscale(0, 32768);
        
        for (Point p : points) {
            p.draw();
        }
        StdDraw.show();
        */
    }

}
