import edu.princeton.cs.algs4.StdRandom;
import edu.princeton.cs.algs4.StdStats;
import edu.princeton.cs.algs4.WeightedQuickUnionUF;

public class Percolation {
	// A map to indicate the indices
	private int[][] siteIndex;
	// A map to keep track of the sites, 0 if blocked, 1 if opened
	private boolean[][] siteConnection; 
	// Size of map
	private int mapSz;
	// Create a new instance of weighted quick union
	WeightedQuickUnionUF myWQU;
	
	
	
	// Create n-by-n grid, with all sites blocked
	 public Percolation(int n) {
		 mapSz = n;
		 siteIndex = new int[n][n];
		 siteConnection = new boolean[n][n];
		 // Set the size of myWQU to mapSz^2 + 2(top and bottom site)
		 myWQU = new WeightedQuickUnionUF(mapSz * mapSz + 2);
		 init();
	 }                
	 private void init() {
		 int ind = 0;
		 for(int i = 0; i < mapSz; i++){
			 for(int j = 0; j < mapSz; j++){
				 siteConnection[i][j] = false;
				 siteIndex[i][j] = ind++;
			 }
		 }
	 }
	 
	 private void printMaps() {
		 for(int i = 0; i < mapSz * mapSz + 2; i++){
			 System.out.println(find(i));
		 }
		 
	 }
	 
	 private void connectVirtual(){
		 for(int i = 0; i < mapSz; i++){
			 myWQU.union(siteIndex[0][i], mapSz * mapSz);
			 myWQU.union(siteIndex[mapSz-1][i], mapSz * mapSz + 1);
		 }
	 }
	 
	 // Open site (row, col) if it is not open already
	 public void open(int row, int col) {
		 
	 }    
	 
	 // Is site (row, col) open?
	 public boolean isOpen(int row, int col) {
		 return true;
	 }  
	 
	 // Is site (row, col) full?
	 public boolean isFull(int row, int col) {
		 return true;
	 }  
	
	 // Number of open sites
	 public int numberOfOpenSites() {
		 return 0;
	 }       
	 
	// Does the system percolate?
	 public boolean percolates() {
		 return true;
	 }         
	
	
	public static void main(String[] args) {	
		System.out.println("Hello world!");

	}

}
