import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;
import edu.princeton.cs.algs4.*;
import edu.princeton.cs.algs4.StdDraw;

public class BruteCollinearPoints {
    private List<LineSegment> lineSegs = new ArrayList<>();
    private Point[] pointsCopy;
    private int pointLen;
    //private LineSegment[] getLineSeg(){
    //    return lineSegs.toArray(new LineSegment[lineSegs.size()]);
    //}
    
    public BruteCollinearPoints(Point[] points){    // finds all line segments containing 4 points
        // Throw null pointer exception if array is null or any entry is null
        if(points == null || Arrays.asList(points).contains(null)){
            throw new java.lang.NullPointerException();
        }
        else{
            // Copy the points and record the length
            pointsCopy = points.clone();
            pointLen = pointsCopy.length;
            
            // Sort the copy based on method in Point.java
            Arrays.sort(pointsCopy);
            // Throw illegal argument exception if some points are repeated
            for(int i = 0; i < pointLen - 1; i++){
                if(pointsCopy[i].compareTo(pointsCopy[i + 1]) == 0){
                    throw new java.lang.IllegalArgumentException();
                }
            }
            
            

            
            for(int i = 0; i < pointLen - 3; i++){
                for(int j = i + 1; j < pointLen - 2; j++){
                    for(int k = j + 1; k < pointLen - 1; k++){
                        for(int l = k + 1; l < pointLen; l++){
                            //System.out.println(i + " " + j + " " + k + " " + l);
                            if(pointsCopy[i].slopeTo(pointsCopy[j]).equals(pointsCopy[i].slopeTo(pointsCopy[k])) 
                                    && pointsCopy[i].slopeTo(pointsCopy[k]) == pointsCopy[i].slopeTo(pointsCopy[l])){
                                lineSegs.add(new LineSegment(pointsCopy[i],pointsCopy[l]));
                            }
                        }
                    }
                }
            }
            
            
        }
           
    }    
    public int numberOfSegments(){                  // the number of line segments
        return lineSegs.size();
    }        
    public LineSegment[] segments(){                // the line segments
        return lineSegs.toArray(new LineSegment[lineSegs.size()]);
    }                
    
    
    public static void main(String[] args) {
    
     // read the n points from a file
        In in = new In(args[0]);
        int n = in.readInt();
        Point[] points = new Point[n];
        for (int i = 0; i < n; i++) {
            int x = in.readInt();
            int y = in.readInt();
            points[i] = new Point(x, y);
        }

        StdDraw.setPenRadius(0.01);
        StdDraw.setPenColor(StdDraw.BLUE);
        StdDraw.enableDoubleBuffering();
        StdDraw.setXscale(0, 32768);
        StdDraw.setYscale(0, 32768);
        
        
        // print and draw the line segments
        BruteCollinearPoints collinear = new BruteCollinearPoints(points);
        for (LineSegment segment : collinear.segments()) {
            StdOut.println(segment);
            
            segment.draw();
            StdDraw.show();
        }
        
     
    }
    
}
